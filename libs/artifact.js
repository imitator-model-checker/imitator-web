const fs = require('fs');
const path = require('path');
const glob = require('fast-glob');
const { createStripAnsiStream } = require('../libs/utils');
const { spawn } = require('child_process');

/**
 *
 * @param {String} name artifact name
 * @param {String} image Docker image of the artifact
 * @param {String} script script to be executed
 * @param {Array<String>} options script options
 * @param {String} outputFolder folder where output will be saved
 * @param {any} socket socket listening the output of the artifact
 */
function runArtifact(name, image, script, options, outputFolder, socket) {
  return new Promise((resolve, reject) => {
    // get the corresponding artifact command to be executed
    const artifact = spawn('docker', [
      'run',
      '--rm',
      '-v',
      `${outputFolder}:${outputFolder}`,
      image,
      script,
      ...options,
    ]);

    const ansiTransformer = createStripAnsiStream();

    // accumulate artifact output
    artifact.stdout.setEncoding('utf-8');
    artifact.stdout.pipe(ansiTransformer).on('data', (stdout) => {
      socket.emit('artifact_output', name, 'stdout', stdout.toString());
    });

    // accumulate artifact error output
    artifact.stderr.setEncoding('utf-8');
    artifact.stderr.pipe(ansiTransformer).on('data', (stderr) => {
      socket.emit('artifact_output', name, 'error', stderr.toString());
    });

    // create log
    const logFile = path.join(outputFolder, `${script}.log`);
    artifact.stdout.pipe(ansiTransformer).pipe(fs.createWriteStream(logFile));

    // catch error
    artifact.on('error', (error) => reject(error));

    // return result when the artifact finishes
    artifact.on('exit', async (code) => {
      if (code !== 0) {
        return reject(new Error('Artifact error'));
      }

      // files generated by the artifact
      const files = await glob(path.join(outputFolder, '*'));

      socket.emit('artifact_output', name, 'files', {
        path: path.basename(outputFolder),
        files: files.map((f) => path.basename(f)),
      });

      socket.emit('artifact_exit');
    });

    resolve({
      pid: artifact.pid,
    });
  });
}

module.exports = { runArtifact };
