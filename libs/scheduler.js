const fs = require('fs');
const path = require('path');
const cron = require('node-cron');
const config = require('../config');
const dateFns = require('date-fns');

/**
# ┌──────────── minute (0 - 59)
# │ ┌────────── hour (0 - 23)
# │ │ ┌──────── day of month (1 - 31)
# │ │ │ ┌────── month (1 - 12)
# │ │ │ │ ┌──── day of week (0 - 6)
# │ │ │ │ │
# │ │ │ │ │
# * * * * *
*/

/**
 * Remove all the files in a directory
 *
 * @param {string} directory directory where the files are stored
 * @param {Number} days number of days of the oldest created file
 */
async function removeFilesInDirectory(directory, days) {
  const folderExist = fs.promises.access(directory);
  if (!folderExist) return;

  // Compute the creation time of the allowed oldest files
  const endTime = dateFns.subDays(new Date(), days);
  const files = await fs.promises.readdir(directory);

  await Promise.all(
    files.map(async (f) => {
      const { ctime } = await fs.promises.stat(path.join(directory, f));
      if (ctime <= endTime) {
        console.log('removing:', f);
        await fs.promises.unlink(f);
      }
    })
  );
}

/**
 * Clean temporary files generated by imitator (every day)
 */
const cleanScheduler = cron.schedule('0 0 * * *', async () => {
  const directory = config.uploadFolder;
  console.log(
    `[cronjob] cleaning temporary imitator files in ${directory} ...`
  );
  await removeFilesInDirectory(directory, parseInt(config.timeLimit));
});

/**
 * Start all the cronjobs
 */
function initialize() {
  cleanScheduler.start();
}

module.exports = initialize;
